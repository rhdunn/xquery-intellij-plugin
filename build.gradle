import io.github.rhdunn.intellij.IntelliJSnapshot
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

buildscript {
    ext.ijVersion = BuildConfiguration.INSTANCE.getPlatformVersion(project)
    ext.kotlin_version = Version.INSTANCE.Kotlin(ext.ijVersion)
    ext.java_version = Version.INSTANCE.Java(ext.ijVersion)

    ext.junit5_version = "5.9.1"
    ext.junit_platform_version = "1.9.1"

    ext.plugin_version = "1.9.4"
    // Suffix ordering:
    //    `"-snapshot"` -- for development builds
    //    `"-eap-###"`  -- for early access preview builds (`-eap-1`, `-eap-2`, `-eap-3`, etc.)
    //    `""`          -- for release builds
    ext.suffix = ""

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.intellij.platform" version "2.5.0"
}

configure(allprojects - project(":src")) {
    apply plugin: "org.jetbrains.intellij.platform"
    apply plugin: "idea"
    apply plugin: "kotlin"
    apply plugin: "jacoco"

    group "uk.co.reecedunn.intellij.plugin.xquery"
    version = plugin_version + "-" + ijVersion.buildVersion.toString() + suffix

    repositories {
        mavenCentral()
        mavenLocal()
        intellijPlatform {
            defaultRepositories()
            jetbrainsRuntime()
        }
        maven { url = "https://packages.jetbrains.team/maven/p/grazi/grazie-platform-public" } // grazie
        maven { url = "https://download.jetbrains.com/teamcity-repository" } // teamcity
        maven { url = "https://packages.jetbrains.team/maven/p/dpgpv/maven" } // download-pgp-verifier
    }

    kotlin {
        jvmToolchain(java_version)
    }

    runIde {
        maxHeapSize = "2g"
    }

    dependencies {
        intellijPlatform {
            if (ijVersion instanceof IntelliJSnapshot) {
                create(ijVersion.platformType, ijVersion.value, false)
                jetbrainsRuntime()
            } else {
                create(ijVersion.platformType, ijVersion.platformVersion, true)
            }

            instrumentationTools()

            testFramework TestFrameworkType.Platform.INSTANCE
        }

        testImplementation("org.junit.jupiter:junit-jupiter-api:$junit5_version")
        testImplementation("org.hamcrest:hamcrest-core:1.3")

        testRuntimeOnly("org.junit.platform:junit-platform-launcher:$junit_platform_version")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit5_version")
        testRuntimeOnly("junit:junit:4.13")
    }

    // Subproject tasks:
    // These tasks fail when run on the subprojects as they do things like looking
    // for the plugin.xml file or the idea-sandbox. As such these tasks are disabled
    // for the subprojects and only enabled for the main project.
    tasks {
        buildPlugin.enabled = false
        prepareSandbox.enabled = false
        publishPlugin.enabled = false
        runIde.enabled = false
        verifyPlugin.enabled = false
        prepareJarSearchableOptions.enabled = false
        buildSearchableOptions.enabled = false
    }

    test {
        useJUnitPlatform()

        // IntelliJ requires the tests to be run headless when loading icons, etc.
        systemProperty("java.awt.headless", "true")
    }
}

dependencies {
    intellijPlatform {
        bundledPlugin("org.intellij.intelliLang")
        bundledPlugin("com.intellij.java")
        bundledPlugin("com.intellij.properties")
        if (ijVersion.buildVersion >= 243) {
            bundledPlugin("com.intellij.modules.json")
        }
    }

    implementation(project(":src:kotlin-intellij"))
    implementation(project(":src:lang-core"))
    implementation(project(":src:plugin-api"))

    implementation(project(":src:plugin-basex"))
    implementation(project(":src:plugin-existdb"))
    implementation(project(":src:plugin-marklogic"))
    implementation(project(":src:plugin-saxon"))
    implementation(project(":src:plugin-xijp"))

    implementation(project(":src:lang-xdm"))
    implementation(project(":src:lang-xpm"))

    implementation(project(":src:lang-xpath"))
    implementation(project(":src:lang-xquery"))
    implementation(project(":src:lang-xslt"))
    implementation(project(":src:lang-xproc"))

    implementation(project(":src:lang-java"))
    implementation(project(":src:lang-xqdoc"))

    implementation(project(":src:plugin-expath"))
    implementation(project(":src:plugin-exquery"))
    implementation(project(":src:plugin-w3"))

    testImplementation(project(":src:intellij-test"))
    testImplementation("org.hamcrest:hamcrest-core:1.3")
}

sourceSets.main {
    if (ijVersion.platformType == "IU") {
        if (ijVersion.buildVersion >= 193) {
            resources.srcDir("src/main/resources-microservices/193")
        } else {
            resources.srcDir("src/main/resources-microservices/compat")
        }
    } else {
        resources.srcDir("src/main/resources-microservices/compat")
    }
}

// Main project tasks:
// These tasks fail when run on the subprojects as they do things like looking
// for the plugin.xml file or the idea-sandbox. As such these tasks are disabled
// for the subprojects and only enabled for the main project.
tasks {
    buildPlugin.enabled = true
    prepareSandbox.enabled = true
    publishPlugin.enabled = true
    runIde.enabled = true
    verifyPlugin.enabled = true
    prepareJarSearchableOptions.enabled = true
    buildSearchableOptions.enabled = true
}

println "Building for IntelliJ ${ijVersion.platformType} version '${ijVersion.platformVersion}', since build '${ijVersion.buildVersion}'"

intellijPlatform {
    pluginConfiguration {
        ideaVersion {
            sinceBuild = "${ijVersion.buildVersion}"
            untilBuild = "${ijVersion.buildVersion}.*"
        }
    }
}

repositories {
    mavenCentral()
}
